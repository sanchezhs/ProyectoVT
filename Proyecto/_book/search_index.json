[["analizando-el-ssdeep.html", "Chapter 2 Analizando el ssdeep 2.1 sample1.c 2.2 sample2.c 2.3 sample3.c 2.4 Analizando los json 2.5 Grafos 2.6 Grafo completo 2.7 Grafo de distancias &lt;= 10 2.8 Análisis del mayor componente 2.9 Analizando los resultados de los antivirus", " Chapter 2 Analizando el ssdeep Las funciones hash como MD5, SHA256 o otras son útiles si queremos verificar la integridad de un archivo, su principio fundamental es que un pequeño cambio en el archivo (del orden de unos pocos bits) cambia la salida drásticamente. En nuestro caso si queremos encontrar similitud entre malware no podemos usar esas funciones, porque si sabemos que un archivo es peligroso y tenemos su hash calculado, con cambiar un bit de ese archivo ya no lo podríamos detectar. Por ello existe el programa ssdeep, que permite observar pequeñas diferencias entre archivos calculando el CTPH (parecido al hash). Tenemos tres programas de ejemplo escritos en C, y queremos ver en qué porcentaje se parecen. 2.1 sample1.c #include &lt;stdio.h&gt; void main() { printf (“Hello World”); } 2.2 sample2.c #include &lt;stdio.h&gt; int main(int argc, char *argv[]) { for (int i = 0; i &lt; 100; i++) { if (i%2 == 0) { i = i + 1; } } return 0; } 2.3 sample3.c #include &lt;stdio.h&gt; void main() { int a = 5; printf (“Hello World: %d\\n”, a); } Ahora calculamos y comparamos el ssdeep de los tres programas: $ ssdeep -s * &gt; sample_ctph.ssd $ ssdeep -m sample_ctph.ssd -s * Obtenemos lo siguiente: $ sample1 matches sample_ctph.ssd:/home/samuel/Documentos/LCC/pruebas/sample1 (100) $ sample1 matches sample_ctph.ssd:/home/samuel/Documentos/LCC/pruebas/sample2 (63) $ sample1 matches sample_ctph.ssd:/home/samuel/Documentos/LCC/pruebas/sample3 (80) sample1.c es mucho más parecido a sample3.c (en un 80%, mientras que solo un 63% con sample2.c). 2.4 Analizando los json Primero cargamos el directorio Android y el dataframe preprocesado. path &lt;- &quot;~/Documentos/LCC/ProyectoVT/Proyecto/Android2/&quot; nombres_ficheros &lt;- list.files(path) df &lt;- read_csv(&quot;~/Documentos/LCC/ProyectoVT/Proyecto/virusTotal.csv&quot;) ## New names: ## Rows: 183 Columns: 10 ## ── Column specification ## ──────────────────────────────────────────────────────── Delimiter: &quot;,&quot; chr ## (2): submission.submitter_country, additional_info.exiftool.FileType dbl (6): ## ...1, total, size, times_submitted, positives, Year dttm (2): scan_date, ## first_seen ## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ ## Specify the column types or set `show_col_types = FALSE` to quiet this message. ## • `` -&gt; `...1` #df_deep &lt;- read.csv(&quot;~/Documentos/LCC/ProyectoVT/Proyecto/analisis_ssdeep.csv&quot;) Para analizar nuestros json, escribimos primero la siguiente función que para cada archivo saca su sdeep y crea un dataframe: # Entrada: json # Salida: dataframe get_ssdeep &lt;- function(x) { json &lt;- read_json(x) res &lt;- json %&gt;% gather_object() %&gt;% filter(name == &#39;ssdeep&#39;) %&gt;% as.data.frame() return (res) } # Por cada archivo en la carpeta Android # coge su ssdeep y los guarda en un dataframe df_deep &lt;- data.frame() for (i in nombres_ficheros) { df_deep &lt;- rbind(df_deep, get_ssdeep(paste0(path,i))) } # Limpia el dataframe df_deep &lt;- df_deep %&gt;% select(..JSON) colnames(df_deep) &lt;- (&#39;ssdeep&#39;) Leemos los dataframes, df_deep contiene los hashes CTPH: # Coge los virus cuya distancia (parecido) # en sus ssdeep sea menor que 2 # y los guarda en *indices* indices &lt;- c() for (i in 1:nrow(df_deep)) { for (j in (i+1):nrow(df_deep)) { if ( adist(df_deep[i,], df_deep[j,]) == 1) { indices &lt;- c(indices, i,j) } } } 2.4.1 Matriz de adyacencias Creamos una matriz de adyacencias con todos los json, donde la posicion Mij = 1 si la distancia entre los hashes del archivo i y el 1 es igual a uno. Cuanto menor es la distancia, menos diferencia hay entre los hashes y más código comparten. n &lt;- nrow(df) Mat &lt;- matrix(0, nrow = n, ncol = n) colnames(Mat) &lt;- c(1:n) row.names(Mat) &lt;- c(1:n) j &lt;- 1 while(j &lt; length(indices)) { Mat[indices[j], indices[j+1]] &lt;- 1 j &lt;- j+2 } Ahora juntamos todo en la siguiente función: # Entrada: distancia entre json # Salida: Grafo=(V,E) # V = json # E = conexiones entre json con sus distancias como pesos get_adj_matrix &lt;- function(distancia) { indices &lt;- c() distancias &lt;- c() for (i in 1:nrow(df_deep)) { for (j in (i+1):nrow(df_deep)) { if ( adist(df_deep[i,], df_deep[j,]) &lt;= distancia) { indices &lt;- c(indices, i,j) distancias &lt;- c(distancias, adist(df_deep[i,], df_deep[j,])) } } } n &lt;- nrow(df) Mat &lt;- matrix(0, nrow = n, ncol = n) colnames(Mat) &lt;- c(1:n) row.names(Mat) &lt;- c(1:n) j &lt;- 1 while(j &lt; length(indices)) { Mat[indices[j], indices[j+1]] &lt;- 1 j &lt;- j+2 } G &lt;- graph_from_adjacency_matrix(Mat, mode = &#39;undirected&#39;) G &lt;- set_edge_attr(G, &#39;dist&#39;, value=distancias) return(G) } 2.5 Grafos Dibujamos el siguiente grafo donde los vértices indican el json y las aristas su simulitud. Esto quiere decir que, por ejemplo, el grupo 147, 153 y 46 comparte gran parte de código. G &lt;- get_adj_matrix(1) Isolated = which(degree(G)==0) G2 = delete.vertices(G, Isolated) plot(G2, vertex.color=&#39;#ADD8E6&#39;, edge.curved = .1, vertex.size=20, edge.label=E(G2)$dist, vertex.frame.color = NA, layout=layout_nicely ) title(&quot;Distancias &lt;= 1&quot;,cex.main=1,col.main=&quot;Black&quot;) 2.6 Grafo completo Vamos a ver qué grafo se dibuja si restringimos menos la búsqueda y ponemos que saque todos los archivos que se parezcan como mínimo en un 60%. Se pueden ver varios grupos que forman componentes y muchos otros nodos aislados. Esto puede deberse a que los componentes corresponden a alguna variantes del mismo malware. G1 &lt;- get_adj_matrix(60) plot(G1) title(&quot;Grafo completo con distancia &lt;= 60&quot;,cex.main=1,col.main=&quot;Black&quot;) Calculamos los componentes y guardamos los nodos del más grande. c1 &lt;- components(G1) biggest1 &lt;- which.max(c1$csize) vids1 &lt;- V(G1)[c1$membership==biggest1] Dibujamos el subgrafo. plot(induced_subgraph(G1, vids1), edge.label=E(G1)$dist) title(&quot;Mayor componente con pesos&quot;,cex.main=1,col.main=&quot;Black&quot;) plot(induced_subgraph(G1, vids1), vertex.size=25) title(&quot;Mayor componente sin pesos&quot;,cex.main=1,col.main=&quot;Black&quot;) plot(induced_subgraph(G1, vids1),vertex.size = 5, vertex.color = &quot;#1e3f66&quot;, vertex.frame.color = &#39;red&#39;, vertex.label.cex = .7, vertex.label = NA, edge.curved = .5, edge.arrow.size = .3, edge.width = .7) title(&quot;Mayor componente&quot;,cex.main=1,col.main=&quot;Black&quot;) 2.6.1 Análisis del componente Usando el algoritmo pagerank y la función grado, ordenamos los nodos por importancia: subgrafo &lt;- induced_subgraph(G1, vids1) pg &lt;- page.rank(subgrafo) importancia &lt;- data.frame( grado = degree(subgrafo), page_rank = pg$vector ) importancia_sorted &lt;- data.frame( grado = sort(degree(subgrafo), decreasing = TRUE), page_rank = sort(pg$vector, decreasing = TRUE) ) knitr::kable(head(importancia_sorted, 10)) grado page_rank 82 62 0.0197978 163 61 0.0196663 47 60 0.0190018 124 59 0.0181018 111 58 0.0180970 154 58 0.0176471 54 57 0.0174520 39 56 0.0170076 67 56 0.0170076 115 55 0.0166772 Resaltamos los nodos con grado mayor que cincuenta: plot(subgrafo, vertex.size=ifelse(importancia[V(subgrafo),][1]&gt;50,5, 1), vertex.label=NA, edge.curved = .5, edge.arrow.size = .3, edge.width = .7) Si vemos los tamaños de los componentes, hay uno con doce nodos: c1$csize ## [1] 3 3 99 1 1 1 1 2 1 1 1 12 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [26] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [51] 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 Lo dibujamos, en este caso los json comparten aproximadamente la mitad de código. vids2 &lt;- V(G1)[c1$membership==12] plot(induced_subgraph(G1, vids2), edge.label=E(G1)$dist, vertex.size=20) 2.7 Grafo de distancias &lt;= 10 Calculamos y dibujamos las componentes del grafo con distancias menores o iguales que diez. G &lt;- get_adj_matrix(10) c &lt;- components(G) biggest &lt;- which.max(c$csize) vids &lt;- V(G)[c$membership==biggest] plot(induced_subgraph(G, vids), edge.label=E(G)$dist) title(&quot;Distancias &lt;= 10 con pesos&quot;,cex.main=1,col.main=&quot;Black&quot;) plot(induced_subgraph(G, vids), vertex.size=25) title(&quot;Distancias &lt;= 10 sin pesos&quot;,cex.main=1,col.main=&quot;Black&quot;) plot(induced_subgraph(G, vids),vertex.size = 10, vertex.color = &quot;#1e3f66&quot;, vertex.frame.color = &#39;blue&#39;, vertex.label.cex = .7, vertex.label = NA, edge.curved = .5, edge.arrow.size = .3, edge.width = .7) title(&quot;Distancias &lt;= 10&quot;,cex.main=1,col.main=&quot;Black&quot;) 2.8 Análisis del mayor componente Todos los archivos tienen el mismo tamaño, subidos desde California en menos de una hora. Con una media de 20 positivos, probablemente sean el mismo archivo. v &lt;- as(vids, &#39;vector&#39;) compare &lt;- data.frame() for (i in v) { compare &lt;- rbind(compare, df[i,]) } compare %&gt;% select(size) %&gt;% unique() ## # A tibble: 1 × 1 ## size ## &lt;dbl&gt; ## 1 2669106 compare %&gt;% select(submission.submitter_country) %&gt;% unique() ## # A tibble: 1 × 1 ## submission.submitter_country ## &lt;chr&gt; ## 1 CA times &lt;- compare %&gt;% select(first_seen, scan_date) %&gt;% mutate(first_seen = gsub(&#39;20[0-9]{2}-[0-9]+-[0-9]+&#39;, &#39;&#39;, first_seen), scan_date = gsub(&#39;20[0-9]{2}-[0-9]+-[0-9]+&#39;, &#39;&#39;, scan_date)) lapply(times[,1], max) ## $first_seen ## [1] &quot; 00:46:00&quot; lapply(times[,1], min) ## $first_seen ## [1] &quot; 00:19:22&quot; Media y desviación típica # Media compare %&gt;% select(positives) %&gt;% lapply(., mean) ## $positives ## [1] 19.85185 # Desviación típica compare %&gt;% select(positives) %&gt;% lapply(., sd) ## $positives ## [1] 1.610153 2.9 Analizando los resultados de los antivirus Vamos a ver qué resultado da cada antivirus a los json (vértices) del grafo anterior. Si dos antivirus dan el mismo resultado en archivos diferentes que sabemos que son casi iguales es probable que compartan motor. La siguiente función recorre el directorio del dataset y crea un dataframe con los antivirus. # Entrada: Ruta al fichero # Salida: Dataframe con resultados de los AV get_results &lt;- function(json) { json_data &lt;- tidyjson::read_json(json) df_temp &lt;- json_data %&gt;% gather_object() %&gt;% filter(name==&#39;scans&#39;) %&gt;% spread_all() %&gt;% gather_object() %&gt;% select(ends_with(&#39;result&#39;)) %&gt;% .[1,] %&gt;% select(-last_col()) return(df_temp) } vids tiene los vértices de los grafos calculados. Pasamos los nombres a formato numérico con ceros a la izquierda. ficheros &lt;- sapply(vids, function(x) paste0(sprintf(&quot;%04d&quot;, x), &#39;.json&#39;) ) Creamos un dataframe y, por cada vértice, cogemos los escáneres. df_results &lt;- data.frame() for (i in ficheros) { df_results &lt;- rbind.fill(df_results, get_results(paste0(path,i))) } write.csv(df_results, &quot;~/Documentos/LCC/ProyectoVT/Proyecto/escaneres.csv&quot;) Leemos y limpiamos el dataframe. df_results &lt;- read_csv(&quot;~/Documentos/LCC/ProyectoVT/Proyecto/escaneres.csv&quot;) ## New names: ## Rows: 27 Columns: 62 ## ── Column specification ## ──────────────────────────────────────────────────────── Delimiter: &quot;,&quot; chr ## (23): Lionic, CAT-QuickHeal, McAfee, K7GW, Trustlook, SymantecMobileInsi... dbl ## (1): ...1 lgl (38): Bkav, MicroWorld-eScan, CMC, Malwarebytes, VIPRE, Sangfor, ## K7AntiV... ## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ ## Specify the column types or set `show_col_types = FALSE` to quiet this message. ## • `` -&gt; `...1` #df_results &lt;- df_results %&gt;% select(-..JSON) colnames(df_results) &lt;- lapply(colnames(df_results), function(x) gsub(&#39;.result&#39;, &#39;&#39;, x)) # Quitar columnas enteras NA df_results &lt;- df_results[, colSums(is.na(df_results)) != nrow(df_results)] df_results &lt;- df_results %&gt;% select(-...1) Cogemos la columna trece, que no tiene valores NA. Como en realidad todas las columnas son el mismo archivo con ver una sola nos sirve, y podemos ver cómo cada antivirus (excepto los que comparten motor) lo clasifican de manera distinta. j107 &lt;- df_results[13,] j107 &lt;- t(j107) knitr::kable(j107, col.names = c(&#39;0107.json&#39;)) 0107.json Lionic Adware.AndroidOS.Ewind.A!c CAT-QuickHeal Android.Mobby.GEN20554 (PUP) McAfee Artemis!919A1900C529 K7GW Trojan ( 005537a81 ) Trustlook Android.Malware.General (score:8) SymantecMobileInsight Trojan:Malapp Symantec Trojan.Gen.MBT ESET-NOD32 a variant of Android/AdDisplay.Mobby.I potentially unwanted Cynet Malicious (score: 99) Kaspersky not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp F-Secure Adware.ADWARE/ANDR.Agent DrWeb Adware.Mobby.5.origin McAfee-GW-Edition Artemis Sophos Android Ewind (PUA) Ikarus PUA.AndroidOS.Mobby Avast-Mobile Android:Evo-gen [Trj] Avira ADWARE/ANDR.Agent.FOKP.Gen Microsoft Adware:AndroidOS/Ewind.A ZoneAlarm not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp BitDefenderFalx Android.Riskware.HiddenAds.HA AhnLab-V3 PUP/Android.Agent.995918 MaxSecure Android.WIN32.Ewind.kp Fortinet Android/Erwind.A!tr Si seleccionamos los AV Kasperky y ZoneAlarm se observa fácilmente que los resultados son idénticos y seguramente compartan el mismo motor. df_results %&gt;% select(Kaspersky, ZoneAlarm) %&gt;% knitr::kable(.) Kaspersky ZoneAlarm not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:UDS:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:UDS:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA NA NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:UDS:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA not-a-virus:HEUR:AdWare.AndroidOS.Ewind.kp NA McAfee y McAfee GW Edition, normal porque ambos son de McAfee df_results %&gt;% select(McAfee, `McAfee-GW-Edition`) %&gt;% knitr::kable(.) McAfee McAfee-GW-Edition Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis NA NA Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 NA Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 NA NA Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 NA Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis NA Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis Artemis!919A1900C529 Artemis "]]
